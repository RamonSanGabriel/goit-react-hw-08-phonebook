{"version":3,"file":"static/js/159.bd2fc1ba.chunk.js","mappings":"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","sources":["../node_modules/notiflix/build/notiflix-notify-aio.js","../node_modules/reselect/src/utils.ts","../node_modules/reselect/src/autotrackMemoize/proxy.ts","../node_modules/reselect/src/weakMapMemoize.ts","../node_modules/reselect/src/createSelectorCreator.ts","../node_modules/reselect/src/createStructuredSelector.ts"],"sourcesContent":["/*\n* Notiflix Notify AIO (https://notiflix.github.io)\n* Description: This file has been created automatically that using \"notiflix.js\", and \"notiflix.css\" files.\n* Version: 3.2.7\n* Author: Furkan (https://github.com/furcan)\n* Copyright 2019 - 2024 Notiflix, MIT License (https://opensource.org/licenses/MIT)\n*/\n\n/* global define */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return factory(root);\n    });\n  } else if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = factory(root);\n  } else {\n    root.Notiflix = factory(root);\n  }\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\n\n  'use strict';\n\n  // COMMON: SSR check: begin\n  if (typeof window === 'undefined' && typeof window.document === 'undefined') {\n    return false;\n  }\n  // COMMON: SSR check: end\n\n  // COMMON: Variables: begin\n  var notiflixNamespace = 'Notiflix';\n  var notiflixConsoleDocs = '\\n\\nVisit documentation page to learn more: https://notiflix.github.io/documentation';\n  var defaultFontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif';\n  // COMMON: Variables: end\n\n  // NOTIFY: Default Settings: begin\n  var typesNotify = {\n    Success: 'Success',\n    Failure: 'Failure',\n    Warning: 'Warning',\n    Info: 'Info',\n  };\n  var newNotifySettings;\n  var notifySettings = {\n    wrapID: 'NotiflixNotifyWrap', // can not customizable\n    overlayID: 'NotiflixNotifyOverlay', // can not customizable\n    width: '280px',\n    position: 'right-top', // 'right-top' - 'right-bottom' - 'left-top' - 'left-bottom' - 'center-top' - 'center-bottom' - 'center-center'\n    distance: '10px',\n    opacity: 1,\n    borderRadius: '5px',\n    rtl: false,\n    timeout: 3000,\n    messageMaxLength: 110,\n    backOverlay: false,\n    backOverlayColor: 'rgba(0,0,0,0.5)',\n    plainText: true,\n    showOnlyTheLastOne: false,\n    clickToClose: false,\n    pauseOnHover: true,\n\n    ID: 'NotiflixNotify',\n    className: 'notiflix-notify',\n    zindex: 4001,\n    fontFamily: 'Quicksand',\n    fontSize: '13px',\n    cssAnimation: true,\n    cssAnimationDuration: 400,\n    cssAnimationStyle: 'fade', // 'fade' - 'zoom' - 'from-right' - 'from-top' - 'from-bottom' - 'from-left'\n    closeButton: false,\n    useIcon: true,\n    useFontAwesome: false,\n    fontAwesomeIconStyle: 'basic', // 'basic' - 'shadow'\n    fontAwesomeIconSize: '34px',\n\n    success: {\n      background: '#32c682',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-success',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-check-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(50,198,130,0.2)',\n    },\n\n    failure: {\n      background: '#ff5549',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-failure',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-times-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(255,85,73,0.2)',\n    },\n\n    warning: {\n      background: '#eebf31',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-warning',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-exclamation-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(238,191,49,0.2)',\n    },\n\n    info: {\n      background: '#26c0d3',\n      textColor: '#fff',\n      childClassName: 'notiflix-notify-info',\n      notiflixIconColor: 'rgba(0,0,0,0.2)',\n      fontAwesomeClassName: 'fas fa-info-circle',\n      fontAwesomeIconColor: 'rgba(0,0,0,0.2)',\n      backOverlayColor: 'rgba(38,192,211,0.2)',\n    },\n  };\n  // NOTIFY: Default Settings: end\n\n  // COMMON: Console Error: begin\n  var commonConsoleError = function (message) {\n    return console.error('%c ' + notiflixNamespace + ' Error ', 'padding:2px;border-radius:20px;color:#fff;background:#ff5549', '\\n' + message + notiflixConsoleDocs);\n  };\n  // COMMON: Console Error: end\n\n  // COMMON: Check Head or Body: begin\n  var commonCheckHeadOrBody = function (element) {\n    if (!element) { element = 'head'; }\n    if (window.document[element] === null) {\n      commonConsoleError('\\nNotiflix needs to be appended to the \"<' + element + '>\" element, but you called it before the \"<' + element + '>\" element has been created.');\n      return false;\n    }\n    return true;\n  };\n  // COMMON: Check Head or Body: end\n\n  // COMMON: Set Internal CSS Codes: begin\n  var commonSetInternalCSSCodes = function (getInternalCSSCodes, styleElementId) {\n    // check doc head\n    if (!commonCheckHeadOrBody('head')) { return false; }\n\n    // internal css\n    if (getInternalCSSCodes() !== null && !window.document.getElementById(styleElementId)) {\n      var internalCSS = window.document.createElement('style');\n      internalCSS.id = styleElementId;\n      internalCSS.innerHTML = getInternalCSSCodes();\n      window.document.head.appendChild(internalCSS);\n    }\n  };\n  // COMMON: Set Internal CSS Codes: end\n\n  // COMMON: Extend Options: begin\n  var commonExtendOptions = function () {\n    // variables\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    // check if a deep merge\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    }\n    // merge the object into the extended object\n    var merge = function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          // if property is an object, merge properties\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            extended[prop] = commonExtendOptions(extended[prop], obj[prop]);\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    };\n    // loop through each object and conduct a merge\n    for (; i < arguments.length; i++) {\n      merge(arguments[i]);\n    }\n    return extended;\n  };\n  // COMMON: Extend Options: end\n\n  // COMMON: Get Plaintext: begin\n  var commonGetPlaintext = function (html) {\n    var htmlPool = window.document.createElement('div');\n    htmlPool.innerHTML = html;\n    return htmlPool.textContent || htmlPool.innerText || '';\n  };\n  // COMMON: Get Plaintext: end\n\n  // NOTIFY: Get Internal CSS Codes: begin\n  var notifyGetInternalCSSCodes = function () {\n    var notifyCSS = '[id^=NotiflixNotifyWrap]{pointer-events:none;position:fixed;z-index:4001;opacity:1;right:10px;top:10px;width:280px;max-width:96%;-webkit-box-sizing:border-box;box-sizing:border-box;background:transparent}[id^=NotiflixNotifyWrap].nx-flex-center-center{max-height:calc(100vh - 20px);overflow-x:hidden;overflow-y:auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;margin:auto}[id^=NotiflixNotifyWrap]::-webkit-scrollbar{width:0;height:0}[id^=NotiflixNotifyWrap]::-webkit-scrollbar-thumb{background:transparent}[id^=NotiflixNotifyWrap]::-webkit-scrollbar-track{background:transparent}[id^=NotiflixNotifyWrap] *{-webkit-box-sizing:border-box;box-sizing:border-box}[id^=NotiflixNotifyOverlay]{-webkit-transition:background .3s ease-in-out;-o-transition:background .3s ease-in-out;transition:background .3s ease-in-out}[id^=NotiflixNotifyWrap]>div{pointer-events:all;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-family:\"Quicksand\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;width:100%;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;position:relative;margin:0 0 10px;border-radius:5px;background:#1e1e1e;color:#fff;padding:10px 12px;font-size:14px;line-height:1.4}[id^=NotiflixNotifyWrap]>div:last-child{margin:0}[id^=NotiflixNotifyWrap]>div.nx-with-callback{cursor:pointer}[id^=NotiflixNotifyWrap]>div.nx-with-icon{padding:8px;min-height:56px}[id^=NotiflixNotifyWrap]>div.nx-paused{cursor:auto}[id^=NotiflixNotifyWrap]>div.nx-notify-click-to-close{cursor:pointer}[id^=NotiflixNotifyWrap]>div.nx-with-close-button{padding:10px 36px 10px 12px}[id^=NotiflixNotifyWrap]>div.nx-with-icon.nx-with-close-button{padding:6px 36px 6px 6px}[id^=NotiflixNotifyWrap]>div>span.nx-message{cursor:inherit;font-weight:normal;font-family:inherit!important;word-break:break-all;word-break:break-word}[id^=NotiflixNotifyWrap]>div>span.nx-close-button{cursor:pointer;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out;position:absolute;right:8px;top:0;bottom:0;margin:auto;color:inherit;width:20px;height:20px}[id^=NotiflixNotifyWrap]>div>span.nx-close-button:hover{-webkit-transform:rotate(90deg);transform:rotate(90deg)}[id^=NotiflixNotifyWrap]>div>span.nx-close-button>svg{position:absolute;width:16px;height:16px;right:2px;top:2px}[id^=NotiflixNotifyWrap]>div>.nx-message-icon{position:absolute;width:40px;height:40px;font-size:30px;line-height:40px;text-align:center;left:8px;top:0;bottom:0;margin:auto;border-radius:inherit}[id^=NotiflixNotifyWrap]>div>.nx-message-icon-fa.nx-message-icon-fa-shadow{color:inherit;background:rgba(0,0,0,.15);-webkit-box-shadow:inset 0 0 34px rgba(0,0,0,.2);box-shadow:inset 0 0 34px rgba(0,0,0,.2);text-shadow:0 0 10px rgba(0,0,0,.3)}[id^=NotiflixNotifyWrap]>div>span.nx-with-icon{position:relative;float:left;width:calc(100% - 40px);margin:0 0 0 40px;padding:0 0 0 10px;-webkit-box-sizing:border-box;box-sizing:border-box}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>.nx-message-icon{left:auto;right:8px}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>span.nx-with-icon{padding:0 10px 0 0;margin:0 40px 0 0}[id^=NotiflixNotifyWrap]>div.nx-rtl-on>span.nx-close-button{right:auto;left:8px}[id^=NotiflixNotifyWrap]>div.nx-with-icon.nx-with-close-button.nx-rtl-on{padding:6px 6px 6px 36px}[id^=NotiflixNotifyWrap]>div.nx-with-close-button.nx-rtl-on{padding:10px 12px 10px 36px}[id^=NotiflixNotifyOverlay].nx-with-animation,[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-fade{-webkit-animation:notify-animation-fade .3s ease-in-out 0s normal;animation:notify-animation-fade .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}@keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-zoom{-webkit-animation:notify-animation-zoom .3s ease-in-out 0s normal;animation:notify-animation-zoom .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-zoom{0%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes notify-animation-zoom{0%{-webkit-transform:scale(0);transform:scale(0)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(1);transform:scale(1)}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-right{-webkit-animation:notify-animation-from-right .3s ease-in-out 0s normal;animation:notify-animation-from-right .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}@keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-left{-webkit-animation:notify-animation-from-left .3s ease-in-out 0s normal;animation:notify-animation-from-left .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}@keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-top{-webkit-animation:notify-animation-from-top .3s ease-in-out 0s normal;animation:notify-animation-from-top .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}@keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-bottom{-webkit-animation:notify-animation-from-bottom .3s ease-in-out 0s normal;animation:notify-animation-from-bottom .3s ease-in-out 0s normal}@-webkit-keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}@keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}[id^=NotiflixNotifyOverlay].nx-with-animation.nx-remove,[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-fade.nx-remove{opacity:0;-webkit-animation:notify-remove-fade .3s ease-in-out 0s normal;animation:notify-remove-fade .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}@keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-zoom.nx-remove{-webkit-transform:scale(0);transform:scale(0);-webkit-animation:notify-remove-zoom .3s ease-in-out 0s normal;animation:notify-remove-zoom .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-zoom{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(0);transform:scale(0)}}@keyframes notify-remove-zoom{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.05);transform:scale(1.05)}100%{-webkit-transform:scale(0);transform:scale(0)}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-top.nx-remove{opacity:0;-webkit-animation:notify-remove-to-top .3s ease-in-out 0s normal;animation:notify-remove-to-top .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}@keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-right.nx-remove{opacity:0;-webkit-animation:notify-remove-to-right .3s ease-in-out 0s normal;animation:notify-remove-to-right .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}@keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-bottom.nx-remove{opacity:0;-webkit-animation:notify-remove-to-bottom .3s ease-in-out 0s normal;animation:notify-remove-to-bottom .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}@keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.nx-with-animation.nx-from-left.nx-remove{opacity:0;-webkit-animation:notify-remove-to-left .3s ease-in-out 0s normal;animation:notify-remove-to-left .3s ease-in-out 0s normal}@-webkit-keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}@keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}';\n    return notifyCSS || null;\n  };\n  // NOTIFY: Get Internal CSS Codes: end\n\n  // NOTIFY: Create: begin\n  var notifyCreateCounter = 0;\n  var notifyCreate = function (notifyType, message, callbackOrOptions, options) {\n    // check doc body\n    if (!commonCheckHeadOrBody('body')) { return false; }\n\n    // if not initialized pretend like init\n    if (!newNotifySettings) {\n      Notiflix.Notify.init({});\n    }\n\n    // create a backup for new settings\n    var newNotifySettingsBackup = commonExtendOptions(true, newNotifySettings, {});\n\n    // check callbackOrOptions and options: begin\n    if ((typeof callbackOrOptions === 'object' && !Array.isArray(callbackOrOptions)) || (typeof options === 'object' && !Array.isArray(options))) {\n      // new options\n      var newOptions = {};\n      if (typeof callbackOrOptions === 'object') {\n        newOptions = callbackOrOptions;\n      } else if (typeof options === 'object') {\n        newOptions = options;\n      }\n\n      // extend new settings with the new options\n      newNotifySettings = commonExtendOptions(true, newNotifySettings, newOptions);\n    }\n    // check callbackOrOptions and options: end\n\n    // notify type\n    var theType = newNotifySettings[notifyType.toLocaleLowerCase('en')];\n\n    // notify counter\n    notifyCreateCounter++;\n\n    // check the message: begin\n    if (typeof message !== 'string') {\n      message = 'Notiflix ' + notifyType;\n    }\n    // check the message: end\n\n    // if plainText is true => HTML tags not allowed: begin\n    if (newNotifySettings.plainText) {\n      message = commonGetPlaintext(message); // message plain text\n    }\n    // if plainText is true => HTML tags not allowed: end\n\n    // if plainText is false but the message length more than messageMaxLength => Possible HTML tags error: begin\n    if (!newNotifySettings.plainText && message.length > newNotifySettings.messageMaxLength) {\n      // extend settings for error massege\n      newNotifySettings = commonExtendOptions(true, newNotifySettings, { closeButton: true, messageMaxLength: 150 });\n      // error message\n      message = 'Possible HTML Tags Error: The \"plainText\" option is \"false\" and the notification content length is more than the \"messageMaxLength\" option.';\n    }\n    // if plainText is false but the message length more than messageMaxLength => Possible HTML tags error: end\n\n    // check message max length: begin\n    if (message.length > newNotifySettings.messageMaxLength) {\n      message = message.substring(0, newNotifySettings.messageMaxLength) + '...';\n    }\n    // check message max length: end\n\n    // font awesome icon style: begin\n    if (newNotifySettings.fontAwesomeIconStyle === 'shadow') {\n      theType.fontAwesomeIconColor = theType.background;\n    }\n    // font awesome icon style: end\n\n    // if cssAnimaion is false => duration: begin\n    if (!newNotifySettings.cssAnimation) {\n      newNotifySettings.cssAnimationDuration = 0;\n    }\n    // if cssAnimaion is false => duration: end\n\n    // notify wrap: begin\n    var ntflxNotifyWrap = window.document.getElementById(notifySettings.wrapID) || window.document.createElement('div');\n    ntflxNotifyWrap.id = notifySettings.wrapID;\n    ntflxNotifyWrap.style.width = newNotifySettings.width;\n    ntflxNotifyWrap.style.zIndex = newNotifySettings.zindex;\n    ntflxNotifyWrap.style.opacity = newNotifySettings.opacity;\n\n    // wrap position: begin\n    if (newNotifySettings.position === 'center-center') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.margin = 'auto';\n      ntflxNotifyWrap.classList.add('nx-flex-center-center');\n      ntflxNotifyWrap.style.maxHeight = 'calc((100vh - ' + newNotifySettings.distance + ') - ' + newNotifySettings.distance + ')';\n      ntflxNotifyWrap.style.display = 'flex';\n      ntflxNotifyWrap.style.flexWrap = 'wrap';\n      ntflxNotifyWrap.style.flexDirection = 'column';\n      ntflxNotifyWrap.style.justifyContent = 'center';\n      ntflxNotifyWrap.style.alignItems = 'center';\n      ntflxNotifyWrap.style.pointerEvents = 'none';\n    } else if (newNotifySettings.position === 'center-top') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = 'auto';\n      ntflxNotifyWrap.style.margin = 'auto';\n    } else if (newNotifySettings.position === 'center-bottom') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.margin = 'auto';\n    } else if (newNotifySettings.position === 'right-bottom') {\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.left = 'auto';\n    } else if (newNotifySettings.position === 'left-top') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.right = 'auto';\n      ntflxNotifyWrap.style.bottom = 'auto';\n    } else if (newNotifySettings.position === 'left-bottom') {\n      ntflxNotifyWrap.style.left = newNotifySettings.distance;\n      ntflxNotifyWrap.style.bottom = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = 'auto';\n      ntflxNotifyWrap.style.right = 'auto';\n    } else { // 'right-top' or else\n      ntflxNotifyWrap.style.right = newNotifySettings.distance;\n      ntflxNotifyWrap.style.top = newNotifySettings.distance;\n      ntflxNotifyWrap.style.left = 'auto';\n      ntflxNotifyWrap.style.bottom = 'auto';\n    }\n    // wrap position: end\n\n    // if background overlay is true: begin\n    if (newNotifySettings.backOverlay) {\n      var ntflxNotifyOverlay = window.document.getElementById(notifySettings.overlayID) || window.document.createElement('div');\n      ntflxNotifyOverlay.id = notifySettings.overlayID;\n      ntflxNotifyOverlay.style.width = '100%';\n      ntflxNotifyOverlay.style.height = '100%';\n      ntflxNotifyOverlay.style.position = 'fixed';\n      ntflxNotifyOverlay.style.zIndex = newNotifySettings.zindex - 1;\n      ntflxNotifyOverlay.style.left = 0;\n      ntflxNotifyOverlay.style.top = 0;\n      ntflxNotifyOverlay.style.right = 0;\n      ntflxNotifyOverlay.style.bottom = 0;\n      ntflxNotifyOverlay.style.background = theType.backOverlayColor || newNotifySettings.backOverlayColor;\n      ntflxNotifyOverlay.className = newNotifySettings.cssAnimation ? 'nx-with-animation' : '';\n      ntflxNotifyOverlay.style.animationDuration = newNotifySettings.cssAnimation ? newNotifySettings.cssAnimationDuration + 'ms' : '';\n\n      if (!window.document.getElementById(notifySettings.overlayID)) {\n        window.document.body.appendChild(ntflxNotifyOverlay);\n      }\n    }\n    // if background overlay is true: end\n\n    if (!window.document.getElementById(notifySettings.wrapID)) {\n      window.document.body.appendChild(ntflxNotifyWrap);\n    }\n    // notify wrap: end\n\n    // notify content: begin\n    var ntflxNotify = window.document.createElement('div');\n    ntflxNotify.id = newNotifySettings.ID + '-' + notifyCreateCounter;\n    ntflxNotify.className = newNotifySettings.className + ' ' + theType.childClassName + ' ' + (newNotifySettings.cssAnimation ? 'nx-with-animation' : '') + ' ' + (newNotifySettings.useIcon ? 'nx-with-icon' : '') + ' nx-' + newNotifySettings.cssAnimationStyle + ' ' + (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function' ? 'nx-with-close-button' : '') + ' ' + (typeof callbackOrOptions === 'function' ? 'nx-with-callback' : '') + ' ' + (newNotifySettings.clickToClose ? 'nx-notify-click-to-close' : '');\n    ntflxNotify.style.fontSize = newNotifySettings.fontSize;\n    ntflxNotify.style.color = theType.textColor;\n    ntflxNotify.style.background = theType.background;\n    ntflxNotify.style.borderRadius = newNotifySettings.borderRadius;\n    ntflxNotify.style.pointerEvents = 'all';\n\n    // rtl: begin\n    if (newNotifySettings.rtl) {\n      ntflxNotify.setAttribute('dir', 'rtl');\n      ntflxNotify.classList.add('nx-rtl-on');\n    }\n    // rtl: end\n\n    // font-family: begin\n    ntflxNotify.style.fontFamily = '\"' + newNotifySettings.fontFamily + '\", ' + defaultFontFamily;\n    // font-family: end\n\n    // use css animation: begin\n    if (newNotifySettings.cssAnimation) {\n      ntflxNotify.style.animationDuration = newNotifySettings.cssAnimationDuration + 'ms';\n    }\n    // use css animation: end\n\n    // close button element: begin\n    var closeButtonHTML = '';\n    if (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n      closeButtonHTML = '<span class=\"nx-close-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M0.38 2.19l7.8 7.81 -7.8 7.81c-0.51,0.5 -0.51,1.31 -0.01,1.81 0.25,0.25 0.57,0.38 0.91,0.38 0.34,0 0.67,-0.14 0.91,-0.38l7.81 -7.81 7.81 7.81c0.24,0.24 0.57,0.38 0.91,0.38 0.34,0 0.66,-0.14 0.9,-0.38 0.51,-0.5 0.51,-1.31 0,-1.81l-7.81 -7.81 7.81 -7.81c0.51,-0.5 0.51,-1.31 0,-1.82 -0.5,-0.5 -1.31,-0.5 -1.81,0l-7.81 7.81 -7.81 -7.81c-0.5,-0.5 -1.31,-0.5 -1.81,0 -0.51,0.51 -0.51,1.32 0,1.82z\"/></g></svg></span>';\n    }\n    // close buttpon element: end\n\n    // use icon: begin\n    if (newNotifySettings.useIcon) {\n      // use font awesome\n      if (newNotifySettings.useFontAwesome) {\n        ntflxNotify.innerHTML = '<i style=\"color:' + theType.fontAwesomeIconColor + '; font-size:' + newNotifySettings.fontAwesomeIconSize + ';\" class=\"nx-message-icon nx-message-icon-fa ' + theType.fontAwesomeClassName + ' ' + (newNotifySettings.fontAwesomeIconStyle === 'shadow' ? 'nx-message-icon-fa-shadow' : 'nx-message-icon-fa-basic') + '\"></i><span class=\"nx-message nx-with-icon\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n      }\n      // use notiflix icon\n      else {\n        var svgIcon = '';\n        if (notifyType === typesNotify.Success) {  // success\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-2.4 -13.29l11.52 -12.96c0.37,-0.41 1.01,-0.45 1.42,-0.08 0.42,0.37 0.46,1 0.09,1.42l-12.16 13.67c-0.19,0.22 -0.46,0.34 -0.75,0.34 -0.23,0 -0.45,-0.07 -0.63,-0.22l-7.6 -6.07c-0.43,-0.35 -0.5,-0.99 -0.16,-1.42 0.35,-0.43 0.99,-0.5 1.42,-0.16l6.85 5.48z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Failure) { // failure\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm1.42 -17.98l6.13 6.12c0.39,0.4 0.39,1.04 0,1.43 -0.19,0.19 -0.45,0.29 -0.71,0.29 -0.27,0 -0.53,-0.1 -0.72,-0.29l-6.12 -6.13 -6.13 6.13c-0.19,0.19 -0.44,0.29 -0.71,0.29 -0.27,0 -0.52,-0.1 -0.71,-0.29 -0.39,-0.39 -0.39,-1.03 0,-1.43l6.13 -6.12 -6.13 -6.13c-0.39,-0.39 -0.39,-1.03 0,-1.42 0.39,-0.39 1.03,-0.39 1.42,0l6.13 6.12 6.12 -6.12c0.4,-0.39 1.04,-0.39 1.43,0 0.39,0.39 0.39,1.03 0,1.42l-6.13 6.13z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Warning) { // warning\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M21.91 3.48l17.8 30.89c0.84,1.46 -0.23,3.25 -1.91,3.25l-35.6 0c-1.68,0 -2.75,-1.79 -1.91,-3.25l17.8 -30.89c0.85,-1.47 2.97,-1.47 3.82,0zm16.15 31.84l-17.8 -30.89c-0.11,-0.2 -0.41,-0.2 -0.52,0l-17.8 30.89c-0.12,0.2 0.05,0.4 0.26,0.4l35.6 0c0.21,0 0.38,-0.2 0.26,-0.4zm-19.01 -4.12l0 -1.05c0,-0.53 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.42 0.95,0.95l0 1.05c0,0.53 -0.42,0.95 -0.95,0.95 -0.53,0 -0.95,-0.42 -0.95,-0.95zm0 -4.66l0 -13.39c0,-0.52 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.43 0.95,0.95l0 13.39c0,0.53 -0.42,0.96 -0.95,0.96 -0.53,0 -0.95,-0.43 -0.95,-0.96z\"/></g></svg>';\n        } else if (notifyType === typesNotify.Info) { // info\n          svgIcon = '<svg class=\"nx-message-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"0 0 40 40\"><g><path fill=\"' + theType.notiflixIconColor + '\" d=\"M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-0.99 -23.3c0,-0.54 0.44,-0.98 0.99,-0.98 0.55,0 0.99,0.44 0.99,0.98l0 15.86c0,0.55 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.44 -0.99,-0.99l0 -15.86zm0 -5.22c0,-0.55 0.44,-0.99 0.99,-0.99 0.55,0 0.99,0.44 0.99,0.99l0 1.09c0,0.54 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.45 -0.99,-0.99l0 -1.09z\"/></g></svg>';\n        }\n        ntflxNotify.innerHTML = svgIcon + '<span class=\"nx-message nx-with-icon\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n      }\n    }\n    // without icon\n    else {\n      ntflxNotify.innerHTML = '<span class=\"nx-message\">' + message + '</span>' + (newNotifySettings.closeButton ? closeButtonHTML : '');\n    }\n    // use icon: end\n    // notify content: end\n\n    // notify append or prepend: begin\n    if (newNotifySettings.position === 'left-bottom' || newNotifySettings.position === 'right-bottom') { // the new one will be first\n      var notifyWrap = window.document.getElementById(notifySettings.wrapID);\n      notifyWrap.insertBefore(ntflxNotify, notifyWrap.firstChild);\n    } else {\n      window.document.getElementById(notifySettings.wrapID).appendChild(ntflxNotify);\n    }\n    // notify append or prepend: end\n\n    // remove by timeout or click: begin\n    var eachNotifyElement = window.document.getElementById(ntflxNotify.id);\n    if (eachNotifyElement) {\n      // timeout variables\n      var timeoutHide;\n      var timeoutRemove;\n\n      // hide notify elm and hide overlay: begin\n      var hideNotifyElementsAndOverlay = function () {\n        eachNotifyElement.classList.add('nx-remove');\n        var removeOverlay = window.document.getElementById(notifySettings.overlayID);\n        if (removeOverlay && ntflxNotifyWrap.childElementCount <= 0) {\n          removeOverlay.classList.add('nx-remove');\n        }\n        clearTimeout(timeoutHide);\n      };\n      // hide notify elm and hide overlay: end\n\n      // remove notify elm and wrapper: begin\n      var removeNotifyElmentsAndWrapper = function () {\n        if (eachNotifyElement && eachNotifyElement.parentNode !== null) {\n          eachNotifyElement.parentNode.removeChild(eachNotifyElement);\n        }\n        if (ntflxNotifyWrap.childElementCount <= 0 && ntflxNotifyWrap.parentNode !== null) { // if childs count === 0 remove wrap\n          ntflxNotifyWrap.parentNode.removeChild(ntflxNotifyWrap);\n          var removeOverlay = window.document.getElementById(notifySettings.overlayID);\n          if (removeOverlay && removeOverlay.parentNode !== null) {\n            removeOverlay.parentNode.removeChild(removeOverlay);\n          }\n        }\n        clearTimeout(timeoutRemove);\n      };\n      // remove notify elm and wrapper: end\n\n      // if has close button and callbackOrOptions is not a function: begin\n      if (newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n        var closeButtonElm = window.document.getElementById(ntflxNotify.id).querySelector('span.nx-close-button');\n        closeButtonElm.addEventListener('click', function () {\n          hideNotifyElementsAndOverlay();\n          var clickToCloseTimeout = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n            clearTimeout(clickToCloseTimeout);\n          }, newNotifySettings.cssAnimationDuration);\n        });\n      }\n      // if has close button and callbackOrOptions is not a function: end\n\n      // if callbackOrOptions or click to close: begin\n      if (typeof callbackOrOptions === 'function' || newNotifySettings.clickToClose) {\n        eachNotifyElement.addEventListener('click', function () {\n          if (typeof callbackOrOptions === 'function') {\n            callbackOrOptions();\n          }\n          hideNotifyElementsAndOverlay();\n          var callbackTimeout = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n            clearTimeout(callbackTimeout);\n          }, newNotifySettings.cssAnimationDuration);\n        });\n      }\n      // if callbackOrOptions or click to close: end\n\n      // else auto remove: begin\n      if (!newNotifySettings.closeButton && typeof callbackOrOptions !== 'function') {\n        // auto remove: begin\n        var autoRemove = function () {\n          timeoutHide = setTimeout(function () {\n            hideNotifyElementsAndOverlay();\n          }, newNotifySettings.timeout);\n          timeoutRemove = setTimeout(function () {\n            removeNotifyElmentsAndWrapper();\n          }, newNotifySettings.timeout + newNotifySettings.cssAnimationDuration);\n        };\n        autoRemove();\n        // auto remove: end\n\n        // pause auto remove: begin\n        if (newNotifySettings.pauseOnHover) {\n          eachNotifyElement.addEventListener('mouseenter', function () {\n            eachNotifyElement.classList.add('nx-paused');\n            clearTimeout(timeoutHide);\n            clearTimeout(timeoutRemove);\n          });\n          eachNotifyElement.addEventListener('mouseleave', function () {\n            eachNotifyElement.classList.remove('nx-paused');\n            autoRemove();\n          });\n        }\n        // pause auto remove: end\n      }\n      // else auto remove: end\n    }\n    // remove by timeout or click: end\n\n    // notify - show only the last one: begin\n    if (newNotifySettings.showOnlyTheLastOne && notifyCreateCounter > 0) {\n      var allNotifyElmNotTheLastOne = window.document.querySelectorAll('[id^=' + newNotifySettings.ID + '-]:not([id=' + newNotifySettings.ID + '-' + notifyCreateCounter + '])');\n      for (var i = 0; i < allNotifyElmNotTheLastOne.length; i++) {\n        var eachNotifyElmNotLastOne = allNotifyElmNotTheLastOne[i];\n        if (eachNotifyElmNotLastOne.parentNode !== null) {\n          eachNotifyElmNotLastOne.parentNode.removeChild(eachNotifyElmNotLastOne);\n        }\n      }\n    }\n    // notify - show only the last one: end\n\n    // extend new settings with the backup settings\n    newNotifySettings = commonExtendOptions(true, newNotifySettings, newNotifySettingsBackup);\n\n  };\n  // NOTIFY: Create: end\n\n  var Notiflix = {\n    Notify: {\n      // Init\n      init: function (userNotifyOptions) {\n        // extend options\n        newNotifySettings = commonExtendOptions(true, notifySettings, userNotifyOptions);\n        // internal css if exist\n        commonSetInternalCSSCodes(notifyGetInternalCSSCodes, 'NotiflixNotifyInternalCSS');\n      },\n      // Merge First Init\n      merge: function (userNotifyExtendOptions) {\n        // if initialized already\n        if (newNotifySettings) {\n          newNotifySettings = commonExtendOptions(true, newNotifySettings, userNotifyExtendOptions);\n        }\n        // initialize first\n        else {\n          commonConsoleError('You have to initialize the Notify module before call Merge function.');\n          return false;\n        }\n      },\n      // Success\n      success: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Success, message, callbackOrOptions, options);\n      },\n      // Failure\n      failure: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Failure, message, callbackOrOptions, options);\n      },\n      // Warning\n      warning: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Warning, message, callbackOrOptions, options);\n      },\n      // Info\n      info: function (message, callbackOrOptions, options) {\n        notifyCreate(typesNotify.Info, message, callbackOrOptions, options);\n      },\n    },\n  };\n\n  if (typeof window.Notiflix === 'object') {\n    return commonExtendOptions(true, window.Notiflix, { Notify: Notiflix.Notify });\n  } else {\n    return { Notify: Notiflix.Notify };\n  }\n\n});","import { runIdentityFunctionCheck } from './devModeChecks/identityFunctionCheck'\r\nimport { runInputStabilityCheck } from './devModeChecks/inputStabilityCheck'\r\nimport { globalDevModeChecks } from './devModeChecks/setGlobalDevModeChecks'\r\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\r\nimport type {\r\n  DevModeChecks,\r\n  Selector,\r\n  SelectorArray,\r\n  DevModeChecksExecutionInfo\r\n} from './types'\r\n\r\nexport const NOT_FOUND = /* @__PURE__ */ Symbol('NOT_FOUND')\r\nexport type NOT_FOUND_TYPE = typeof NOT_FOUND\r\n\r\n/**\r\n * Assert that the provided value is a function. If the assertion fails,\r\n * a `TypeError` is thrown with an optional custom error message.\r\n *\r\n * @param func - The value to be checked.\r\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\r\n * @throws A `TypeError` if the assertion fails.\r\n */\r\nexport function assertIsFunction<FunctionType extends Function>(\r\n  func: unknown,\r\n  errorMessage = `expected a function, instead received ${typeof func}`\r\n): asserts func is FunctionType {\r\n  if (typeof func !== 'function') {\r\n    throw new TypeError(errorMessage)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that the provided value is an object. If the assertion fails,\r\n * a `TypeError` is thrown with an optional custom error message.\r\n *\r\n * @param object - The value to be checked.\r\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\r\n * @throws A `TypeError` if the assertion fails.\r\n */\r\nexport function assertIsObject<ObjectType extends Record<string, unknown>>(\r\n  object: unknown,\r\n  errorMessage = `expected an object, instead received ${typeof object}`\r\n): asserts object is ObjectType {\r\n  if (typeof object !== 'object') {\r\n    throw new TypeError(errorMessage)\r\n  }\r\n}\r\n\r\n/**\r\n * Assert that the provided array is an array of functions. If the assertion fails,\r\n * a `TypeError` is thrown with an optional custom error message.\r\n *\r\n * @param array - The array to be checked.\r\n * @param  errorMessage - An optional custom error message to use if the assertion fails.\r\n * @throws A `TypeError` if the assertion fails.\r\n */\r\nexport function assertIsArrayOfFunctions<FunctionType extends Function>(\r\n  array: unknown[],\r\n  errorMessage = `expected all items to be functions, instead received the following types: `\r\n): asserts array is FunctionType[] {\r\n  if (\r\n    !array.every((item): item is FunctionType => typeof item === 'function')\r\n  ) {\r\n    const itemTypes = array\r\n      .map(item =>\r\n        typeof item === 'function'\r\n          ? `function ${item.name || 'unnamed'}()`\r\n          : typeof item\r\n      )\r\n      .join(', ')\r\n    throw new TypeError(`${errorMessage}[${itemTypes}]`)\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure that the input is an array. If it's already an array, it's returned as is.\r\n * If it's not an array, it will be wrapped in a new array.\r\n *\r\n * @param item - The item to be checked.\r\n * @returns An array containing the input item. If the input is already an array, it's returned without modification.\r\n */\r\nexport const ensureIsArray = (item: unknown) => {\r\n  return Array.isArray(item) ? item : [item]\r\n}\r\n\r\n/**\r\n * Extracts the \"dependencies\" / \"input selectors\" from the arguments of `createSelector`.\r\n *\r\n * @param createSelectorArgs - Arguments passed to `createSelector` as an array.\r\n * @returns An array of \"input selectors\" / \"dependencies\".\r\n * @throws A `TypeError` if any of the input selectors is not function.\r\n */\r\nexport function getDependencies(createSelectorArgs: unknown[]) {\r\n  const dependencies = Array.isArray(createSelectorArgs[0])\r\n    ? createSelectorArgs[0]\r\n    : createSelectorArgs\r\n\r\n  assertIsArrayOfFunctions<Selector>(\r\n    dependencies,\r\n    `createSelector expects all input-selectors to be functions, but received the following types: `\r\n  )\r\n\r\n  return dependencies as SelectorArray\r\n}\r\n\r\n/**\r\n * Runs each input selector and returns their collective results as an array.\r\n *\r\n * @param dependencies - An array of \"dependencies\" or \"input selectors\".\r\n * @param inputSelectorArgs - An array of arguments being passed to the input selectors.\r\n * @returns An array of input selector results.\r\n */\r\nexport function collectInputSelectorResults(\r\n  dependencies: SelectorArray,\r\n  inputSelectorArgs: unknown[] | IArguments\r\n) {\r\n  const inputSelectorResults = []\r\n  const { length } = dependencies\r\n  for (let i = 0; i < length; i++) {\r\n    // @ts-ignore\r\n    // apply arguments instead of spreading and mutate a local list of params for performance.\r\n    inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs))\r\n  }\r\n  return inputSelectorResults\r\n}\r\n\r\n/**\r\n * Retrieves execution information for development mode checks.\r\n *\r\n * @param devModeChecks - Custom Settings for development mode checks. These settings will override the global defaults.\r\n * @param firstRun - Indicates whether it is the first time the selector has run.\r\n * @returns  An object containing the execution information for each development mode check.\r\n */\r\nexport const getDevModeChecksExecutionInfo = (\r\n  firstRun: boolean,\r\n  devModeChecks: Partial<DevModeChecks>\r\n) => {\r\n  const { identityFunctionCheck, inputStabilityCheck } = {\r\n    ...globalDevModeChecks,\r\n    ...devModeChecks\r\n  }\r\n  return {\r\n    identityFunctionCheck: {\r\n      shouldRun:\r\n        identityFunctionCheck === 'always' ||\r\n        (identityFunctionCheck === 'once' && firstRun),\r\n      run: runIdentityFunctionCheck\r\n    },\r\n    inputStabilityCheck: {\r\n      shouldRun:\r\n        inputStabilityCheck === 'always' ||\r\n        (inputStabilityCheck === 'once' && firstRun),\r\n      run: runInputStabilityCheck\r\n    }\r\n  } satisfies DevModeChecksExecutionInfo\r\n}\r\n","// Original source:\r\n// - https://github.com/simonihmig/tracked-redux/blob/master/packages/tracked-redux/src/-private/proxy.ts\r\n\r\nimport type { Node, Tag } from './tracking'\r\nimport {\r\n  consumeCollection,\r\n  consumeTag,\r\n  createTag,\r\n  dirtyCollection,\r\n  dirtyTag\r\n} from './tracking'\r\n\r\nexport const REDUX_PROXY_LABEL = Symbol()\r\n\r\nlet nextId = 0\r\n\r\nconst proto = Object.getPrototypeOf({})\r\n\r\nclass ObjectTreeNode<T extends Record<string, unknown>> implements Node<T> {\r\n  proxy: T = new Proxy(this, objectProxyHandler) as unknown as T\r\n  tag = createTag()\r\n  tags = {} as Record<string, Tag>\r\n  children = {} as Record<string, Node>\r\n  collectionTag = null\r\n  id = nextId++\r\n\r\n  constructor(public value: T) {\r\n    this.value = value\r\n    this.tag.value = value\r\n  }\r\n}\r\n\r\nconst objectProxyHandler = {\r\n  get(node: Node, key: string | symbol): unknown {\r\n    function calculateResult() {\r\n      const { value } = node\r\n\r\n      const childValue = Reflect.get(value, key)\r\n\r\n      if (typeof key === 'symbol') {\r\n        return childValue\r\n      }\r\n\r\n      if (key in proto) {\r\n        return childValue\r\n      }\r\n\r\n      if (typeof childValue === 'object' && childValue !== null) {\r\n        let childNode = node.children[key]\r\n\r\n        if (childNode === undefined) {\r\n          childNode = node.children[key] = createNode(childValue)\r\n        }\r\n\r\n        if (childNode.tag) {\r\n          consumeTag(childNode.tag)\r\n        }\r\n\r\n        return childNode.proxy\r\n      } else {\r\n        let tag = node.tags[key]\r\n\r\n        if (tag === undefined) {\r\n          tag = node.tags[key] = createTag()\r\n          tag.value = childValue\r\n        }\r\n\r\n        consumeTag(tag)\r\n\r\n        return childValue\r\n      }\r\n    }\r\n    const res = calculateResult()\r\n    return res\r\n  },\r\n\r\n  ownKeys(node: Node): ArrayLike<string | symbol> {\r\n    consumeCollection(node)\r\n    return Reflect.ownKeys(node.value)\r\n  },\r\n\r\n  getOwnPropertyDescriptor(\r\n    node: Node,\r\n    prop: string | symbol\r\n  ): PropertyDescriptor | undefined {\r\n    return Reflect.getOwnPropertyDescriptor(node.value, prop)\r\n  },\r\n\r\n  has(node: Node, prop: string | symbol): boolean {\r\n    return Reflect.has(node.value, prop)\r\n  }\r\n}\r\n\r\nclass ArrayTreeNode<T extends Array<unknown>> implements Node<T> {\r\n  proxy: T = new Proxy([this], arrayProxyHandler) as unknown as T\r\n  tag = createTag()\r\n  tags = {}\r\n  children = {}\r\n  collectionTag = null\r\n  id = nextId++\r\n\r\n  constructor(public value: T) {\r\n    this.value = value\r\n    this.tag.value = value\r\n  }\r\n}\r\n\r\nconst arrayProxyHandler = {\r\n  get([node]: [Node], key: string | symbol): unknown {\r\n    if (key === 'length') {\r\n      consumeCollection(node)\r\n    }\r\n\r\n    return objectProxyHandler.get(node, key)\r\n  },\r\n\r\n  ownKeys([node]: [Node]): ArrayLike<string | symbol> {\r\n    return objectProxyHandler.ownKeys(node)\r\n  },\r\n\r\n  getOwnPropertyDescriptor(\r\n    [node]: [Node],\r\n    prop: string | symbol\r\n  ): PropertyDescriptor | undefined {\r\n    return objectProxyHandler.getOwnPropertyDescriptor(node, prop)\r\n  },\r\n\r\n  has([node]: [Node], prop: string | symbol): boolean {\r\n    return objectProxyHandler.has(node, prop)\r\n  }\r\n}\r\n\r\nexport function createNode<T extends Array<unknown> | Record<string, unknown>>(\r\n  value: T\r\n): Node<T> {\r\n  if (Array.isArray(value)) {\r\n    return new ArrayTreeNode(value)\r\n  }\r\n\r\n  return new ObjectTreeNode(value) as Node<T>\r\n}\r\n\r\nconst keysMap = new WeakMap<\r\n  Array<unknown> | Record<string, unknown>,\r\n  Set<string>\r\n>()\r\n\r\nexport function updateNode<T extends Array<unknown> | Record<string, unknown>>(\r\n  node: Node<T>,\r\n  newValue: T\r\n): void {\r\n  const { value, tags, children } = node\r\n\r\n  node.value = newValue\r\n\r\n  if (\r\n    Array.isArray(value) &&\r\n    Array.isArray(newValue) &&\r\n    value.length !== newValue.length\r\n  ) {\r\n    dirtyCollection(node)\r\n  } else {\r\n    if (value !== newValue) {\r\n      let oldKeysSize = 0\r\n      let newKeysSize = 0\r\n      let anyKeysAdded = false\r\n\r\n      for (const _key in value) {\r\n        oldKeysSize++\r\n      }\r\n\r\n      for (const key in newValue) {\r\n        newKeysSize++\r\n        if (!(key in value)) {\r\n          anyKeysAdded = true\r\n          break\r\n        }\r\n      }\r\n\r\n      const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize\r\n\r\n      if (isDifferent) {\r\n        dirtyCollection(node)\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const key in tags) {\r\n    const childValue = (value as Record<string, unknown>)[key]\r\n    const newChildValue = (newValue as Record<string, unknown>)[key]\r\n\r\n    if (childValue !== newChildValue) {\r\n      dirtyCollection(node)\r\n      dirtyTag(tags[key], newChildValue)\r\n    }\r\n\r\n    if (typeof newChildValue === 'object' && newChildValue !== null) {\r\n      delete tags[key]\r\n    }\r\n  }\r\n\r\n  for (const key in children) {\r\n    const childNode = children[key]\r\n    const newChildValue = (newValue as Record<string, unknown>)[key]\r\n\r\n    const childValue = childNode.value\r\n\r\n    if (childValue === newChildValue) {\r\n      continue\r\n    } else if (typeof newChildValue === 'object' && newChildValue !== null) {\r\n      updateNode(childNode, newChildValue as Record<string, unknown>)\r\n    } else {\r\n      deleteNode(childNode)\r\n      delete children[key]\r\n    }\r\n  }\r\n}\r\n\r\nfunction deleteNode(node: Node): void {\r\n  if (node.tag) {\r\n    dirtyTag(node.tag, null)\r\n  }\r\n  dirtyCollection(node)\r\n  for (const key in node.tags) {\r\n    dirtyTag(node.tags[key], null)\r\n  }\r\n  for (const key in node.children) {\r\n    deleteNode(node.children[key])\r\n  }\r\n}\r\n","// Original source:\r\n// - https://github.com/facebook/react/blob/0b974418c9a56f6c560298560265dcf4b65784bc/packages/react/src/ReactCache.js\r\n\r\nimport type {\r\n  AnyFunction,\r\n  DefaultMemoizeFields,\r\n  EqualityFn,\r\n  Simplify\r\n} from './types'\r\n\r\nclass StrongRef<T> {\r\n  constructor(private value: T) {}\r\n  deref() {\r\n    return this.value\r\n  }\r\n}\r\n\r\nconst Ref =\r\n  typeof WeakRef !== 'undefined'\r\n    ? WeakRef\r\n    : (StrongRef as unknown as typeof WeakRef)\r\n\r\nconst UNTERMINATED = 0\r\nconst TERMINATED = 1\r\n\r\ninterface UnterminatedCacheNode<T> {\r\n  /**\r\n   * Status, represents whether the cached computation returned a value or threw an error.\r\n   */\r\n  s: 0\r\n  /**\r\n   * Value, either the cached result or an error, depending on status.\r\n   */\r\n  v: void\r\n  /**\r\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\r\n   */\r\n  o: null | WeakMap<Function | Object, CacheNode<T>>\r\n  /**\r\n   * Primitive cache, a regular Map where primitive arguments are stored.\r\n   */\r\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\r\n}\r\n\r\ninterface TerminatedCacheNode<T> {\r\n  /**\r\n   * Status, represents whether the cached computation returned a value or threw an error.\r\n   */\r\n  s: 1\r\n  /**\r\n   * Value, either the cached result or an error, depending on status.\r\n   */\r\n  v: T\r\n  /**\r\n   * Object cache, a `WeakMap` where non-primitive arguments are stored.\r\n   */\r\n  o: null | WeakMap<Function | Object, CacheNode<T>>\r\n  /**\r\n   * Primitive cache, a regular `Map` where primitive arguments are stored.\r\n   */\r\n  p: null | Map<string | number | null | void | symbol | boolean, CacheNode<T>>\r\n}\r\n\r\ntype CacheNode<T> = TerminatedCacheNode<T> | UnterminatedCacheNode<T>\r\n\r\nfunction createCacheNode<T>(): CacheNode<T> {\r\n  return {\r\n    s: UNTERMINATED,\r\n    v: undefined,\r\n    o: null,\r\n    p: null\r\n  }\r\n}\r\n\r\n/**\r\n * Configuration options for a memoization function utilizing `WeakMap` for\r\n * its caching mechanism.\r\n *\r\n * @template Result - The type of the return value of the memoized function.\r\n *\r\n * @since 5.0.0\r\n * @public\r\n */\r\nexport interface WeakMapMemoizeOptions<Result = any> {\r\n  /**\r\n   * If provided, used to compare a newly generated output value against previous values in the cache.\r\n   * If a match is found, the old value is returned. This addresses the common\r\n   * ```ts\r\n   * todos.map(todo => todo.id)\r\n   * ```\r\n   * use case, where an update to another field in the original data causes a recalculation\r\n   * due to changed references, but the output is still effectively the same.\r\n   *\r\n   * @since 5.0.0\r\n   */\r\n  resultEqualityCheck?: EqualityFn<Result>\r\n}\r\n\r\n/**\r\n * Creates a tree of `WeakMap`-based cache nodes based on the identity of the\r\n * arguments it's been called with (in this case, the extracted values from your input selectors).\r\n * This allows `weakMapMemoize` to have an effectively infinite cache size.\r\n * Cache results will be kept in memory as long as references to the arguments still exist,\r\n * and then cleared out as the arguments are garbage-collected.\r\n *\r\n * __Design Tradeoffs for `weakMapMemoize`:__\r\n * - Pros:\r\n *   - It has an effectively infinite cache size, but you have no control over\r\n *   how long values are kept in cache as it's based on garbage collection and `WeakMap`s.\r\n * - Cons:\r\n *   - There's currently no way to alter the argument comparisons.\r\n *   They're based on strict reference equality.\r\n *   - It's roughly the same speed as `lruMemoize`, although likely a fraction slower.\r\n *\r\n * __Use Cases for `weakMapMemoize`:__\r\n * - This memoizer is likely best used for cases where you need to call the\r\n * same selector instance with many different arguments, such as a single\r\n * selector instance that is used in a list item component and called with\r\n * item IDs like:\r\n *   ```ts\r\n *   useSelector(state => selectSomeData(state, props.category))\r\n *   ```\r\n * @param func - The function to be memoized.\r\n * @returns A memoized function with a `.clearCache()` method attached.\r\n *\r\n * @example\r\n * <caption>Using `createSelector`</caption>\r\n * ```ts\r\n * import { createSelector, weakMapMemoize } from 'reselect'\r\n *\r\n * interface RootState {\r\n *   items: { id: number; category: string; name: string }[]\r\n * }\r\n *\r\n * const selectItemsByCategory = createSelector(\r\n *   [\r\n *     (state: RootState) => state.items,\r\n *     (state: RootState, category: string) => category\r\n *   ],\r\n *   (items, category) => items.filter(item => item.category === category),\r\n *   {\r\n *     memoize: weakMapMemoize,\r\n *     argsMemoize: weakMapMemoize\r\n *   }\r\n * )\r\n * ```\r\n *\r\n * @example\r\n * <caption>Using `createSelectorCreator`</caption>\r\n * ```ts\r\n * import { createSelectorCreator, weakMapMemoize } from 'reselect'\r\n *\r\n * const createSelectorWeakMap = createSelectorCreator({ memoize: weakMapMemoize, argsMemoize: weakMapMemoize })\r\n *\r\n * const selectItemsByCategory = createSelectorWeakMap(\r\n *   [\r\n *     (state: RootState) => state.items,\r\n *     (state: RootState, category: string) => category\r\n *   ],\r\n *   (items, category) => items.filter(item => item.category === category)\r\n * )\r\n * ```\r\n *\r\n * @template Func - The type of the function that is memoized.\r\n *\r\n * @see {@link https://reselect.js.org/api/weakMapMemoize `weakMapMemoize`}\r\n *\r\n * @since 5.0.0\r\n * @public\r\n * @experimental\r\n */\r\nexport function weakMapMemoize<Func extends AnyFunction>(\r\n  func: Func,\r\n  options: WeakMapMemoizeOptions<ReturnType<Func>> = {}\r\n) {\r\n  let fnNode = createCacheNode()\r\n  const { resultEqualityCheck } = options\r\n\r\n  let lastResult: WeakRef<object> | undefined\r\n\r\n  let resultsCount = 0\r\n\r\n  function memoized() {\r\n    let cacheNode = fnNode\r\n    const { length } = arguments\r\n    for (let i = 0, l = length; i < l; i++) {\r\n      const arg = arguments[i]\r\n      if (\r\n        typeof arg === 'function' ||\r\n        (typeof arg === 'object' && arg !== null)\r\n      ) {\r\n        // Objects go into a WeakMap\r\n        let objectCache = cacheNode.o\r\n        if (objectCache === null) {\r\n          cacheNode.o = objectCache = new WeakMap()\r\n        }\r\n        const objectNode = objectCache.get(arg)\r\n        if (objectNode === undefined) {\r\n          cacheNode = createCacheNode()\r\n          objectCache.set(arg, cacheNode)\r\n        } else {\r\n          cacheNode = objectNode\r\n        }\r\n      } else {\r\n        // Primitives go into a regular Map\r\n        let primitiveCache = cacheNode.p\r\n        if (primitiveCache === null) {\r\n          cacheNode.p = primitiveCache = new Map()\r\n        }\r\n        const primitiveNode = primitiveCache.get(arg)\r\n        if (primitiveNode === undefined) {\r\n          cacheNode = createCacheNode()\r\n          primitiveCache.set(arg, cacheNode)\r\n        } else {\r\n          cacheNode = primitiveNode\r\n        }\r\n      }\r\n    }\r\n\r\n    const terminatedNode = cacheNode as unknown as TerminatedCacheNode<any>\r\n\r\n    let result\r\n\r\n    if (cacheNode.s === TERMINATED) {\r\n      result = cacheNode.v\r\n    } else {\r\n      // Allow errors to propagate\r\n      result = func.apply(null, arguments as unknown as any[])\r\n      resultsCount++\r\n\r\n      if (resultEqualityCheck) {\r\n        const lastResultValue = lastResult?.deref?.() ?? lastResult\r\n\r\n        if (\r\n          lastResultValue != null &&\r\n          resultEqualityCheck(lastResultValue as ReturnType<Func>, result)\r\n        ) {\r\n          result = lastResultValue\r\n\r\n          resultsCount !== 0 && resultsCount--\r\n        }\r\n\r\n        const needsWeakRef =\r\n          (typeof result === 'object' && result !== null) ||\r\n          typeof result === 'function'\r\n\r\n        lastResult = needsWeakRef ? new Ref(result) : result\r\n      }\r\n    }\r\n\r\n    terminatedNode.s = TERMINATED\r\n\r\n    terminatedNode.v = result\r\n    return result\r\n  }\r\n\r\n  memoized.clearCache = () => {\r\n    fnNode = createCacheNode()\r\n    memoized.resetResultsCount()\r\n  }\r\n\r\n  memoized.resultsCount = () => resultsCount\r\n\r\n  memoized.resetResultsCount = () => {\r\n    resultsCount = 0\r\n  }\r\n\r\n  return memoized as Func & Simplify<DefaultMemoizeFields>\r\n}\r\n","import { weakMapMemoize } from './weakMapMemoize'\r\n\r\nimport type {\r\n  Combiner,\r\n  CreateSelectorOptions,\r\n  DropFirstParameter,\r\n  ExtractMemoizerFields,\r\n  GetParamsFromSelectors,\r\n  GetStateFromSelectors,\r\n  InterruptRecursion,\r\n  OutputSelector,\r\n  Selector,\r\n  SelectorArray,\r\n  SetRequired,\r\n  Simplify,\r\n  UnknownMemoizer\r\n} from './types'\r\n\r\nimport {\r\n  assertIsFunction,\r\n  collectInputSelectorResults,\r\n  ensureIsArray,\r\n  getDependencies,\r\n  getDevModeChecksExecutionInfo\r\n} from './utils'\r\n\r\n/**\r\n * An instance of `createSelector`, customized with a given memoize implementation.\r\n *\r\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\r\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\r\n * @template StateType - The type of state that the selectors created with this selector creator will operate on.\r\n *\r\n * @public\r\n */\r\nexport interface CreateSelectorFunction<\r\n  MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\r\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\r\n  StateType = any\r\n> {\r\n  /**\r\n   * Creates a memoized selector function.\r\n   *\r\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments and a `combiner` function.\r\n   * @returns A memoized output selector.\r\n   *\r\n   * @template InputSelectors - The type of the input selectors as an array.\r\n   * @template Result - The return type of the `combiner` as well as the output selector.\r\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\r\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\r\n   */\r\n  <InputSelectors extends SelectorArray<StateType>, Result>(\r\n    ...createSelectorArgs: [\r\n      ...inputSelectors: InputSelectors,\r\n      combiner: Combiner<InputSelectors, Result>\r\n    ]\r\n  ): OutputSelector<\r\n    InputSelectors,\r\n    Result,\r\n    MemoizeFunction,\r\n    ArgsMemoizeFunction\r\n  > &\r\n    InterruptRecursion\r\n\r\n  /**\r\n   * Creates a memoized selector function.\r\n   *\r\n   * @param createSelectorArgs - An arbitrary number of input selectors as separate inline arguments, a `combiner` function and an `options` object.\r\n   * @returns A memoized output selector.\r\n   *\r\n   * @template InputSelectors - The type of the input selectors as an array.\r\n   * @template Result - The return type of the `combiner` as well as the output selector.\r\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\r\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\r\n   */\r\n  <\r\n    InputSelectors extends SelectorArray<StateType>,\r\n    Result,\r\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\r\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\r\n  >(\r\n    ...createSelectorArgs: [\r\n      ...inputSelectors: InputSelectors,\r\n      combiner: Combiner<InputSelectors, Result>,\r\n      createSelectorOptions: Simplify<\r\n        CreateSelectorOptions<\r\n          MemoizeFunction,\r\n          ArgsMemoizeFunction,\r\n          OverrideMemoizeFunction,\r\n          OverrideArgsMemoizeFunction\r\n        >\r\n      >\r\n    ]\r\n  ): OutputSelector<\r\n    InputSelectors,\r\n    Result,\r\n    OverrideMemoizeFunction,\r\n    OverrideArgsMemoizeFunction\r\n  > &\r\n    InterruptRecursion\r\n\r\n  /**\r\n   * Creates a memoized selector function.\r\n   *\r\n   * @param inputSelectors - An array of input selectors.\r\n   * @param combiner - A function that Combines the input selectors and returns an output selector. Otherwise known as the result function.\r\n   * @param createSelectorOptions - An optional options object that allows for further customization per selector.\r\n   * @returns A memoized output selector.\r\n   *\r\n   * @template InputSelectors - The type of the input selectors array.\r\n   * @template Result - The return type of the `combiner` as well as the output selector.\r\n   * @template OverrideMemoizeFunction - The type of the optional `memoize` function that could be passed into the options object to override the original `memoize` function that was initially passed into `createSelectorCreator`.\r\n   * @template OverrideArgsMemoizeFunction - The type of the optional `argsMemoize` function that could be passed into the options object to override the original `argsMemoize` function that was initially passed into `createSelectorCreator`.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createselector `createSelector`}\r\n   */\r\n  <\r\n    InputSelectors extends SelectorArray<StateType>,\r\n    Result,\r\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\r\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\r\n  >(\r\n    inputSelectors: [...InputSelectors],\r\n    combiner: Combiner<InputSelectors, Result>,\r\n    createSelectorOptions?: Simplify<\r\n      CreateSelectorOptions<\r\n        MemoizeFunction,\r\n        ArgsMemoizeFunction,\r\n        OverrideMemoizeFunction,\r\n        OverrideArgsMemoizeFunction\r\n      >\r\n    >\r\n  ): OutputSelector<\r\n    InputSelectors,\r\n    Result,\r\n    OverrideMemoizeFunction,\r\n    OverrideArgsMemoizeFunction\r\n  > &\r\n    InterruptRecursion\r\n\r\n  /**\r\n   * Creates a \"pre-typed\" version of {@linkcode createSelector createSelector}\r\n   * where the `state` type is predefined.\r\n   *\r\n   * This allows you to set the `state` type once, eliminating the need to\r\n   * specify it with every {@linkcode createSelector createSelector} call.\r\n   *\r\n   * @returns A pre-typed `createSelector` with the state type already defined.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * import { createSelector } from 'reselect'\r\n   *\r\n   * export interface RootState {\r\n   *   todos: { id: number; completed: boolean }[]\r\n   *   alerts: { id: number; read: boolean }[]\r\n   * }\r\n   *\r\n   * export const createAppSelector = createSelector.withTypes<RootState>()\r\n   *\r\n   * const selectTodoIds = createAppSelector(\r\n   *   [\r\n   *     // Type of `state` is set to `RootState`, no need to manually set the type\r\n   *     state => state.todos\r\n   *   ],\r\n   *   todos => todos.map(({ id }) => id)\r\n   * )\r\n   * ```\r\n   * @template OverrideStateType - The specific type of state used by all selectors created with this selector creator.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createselector#defining-a-pre-typed-createselector `createSelector.withTypes`}\r\n   *\r\n   * @since 5.1.0\r\n   */\r\n  withTypes: <OverrideStateType extends StateType>() => CreateSelectorFunction<\r\n    MemoizeFunction,\r\n    ArgsMemoizeFunction,\r\n    OverrideStateType\r\n  >\r\n}\r\n\r\n/**\r\n * Creates a selector creator function with the specified memoization function\r\n * and options for customizing memoization behavior.\r\n *\r\n * @param options - An options object containing the `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). It also provides additional options for customizing memoization. While the `memoize` property is mandatory, the rest are optional.\r\n * @returns A customized `createSelector` function.\r\n *\r\n * @example\r\n * ```ts\r\n * const customCreateSelector = createSelectorCreator({\r\n *   memoize: customMemoize, // Function to be used to memoize `resultFunc`\r\n *   memoizeOptions: [memoizeOption1, memoizeOption2], // Options passed to `customMemoize` as the second argument onwards\r\n *   argsMemoize: customArgsMemoize, // Function to be used to memoize the selector's arguments\r\n *   argsMemoizeOptions: [argsMemoizeOption1, argsMemoizeOption2] // Options passed to `customArgsMemoize` as the second argument onwards\r\n * })\r\n *\r\n * const customSelector = customCreateSelector(\r\n *   [inputSelector1, inputSelector2],\r\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\r\n * )\r\n *\r\n * customSelector(\r\n *   ...selectorArgs // Will be memoized by `customArgsMemoize`\r\n * )\r\n * ```\r\n *\r\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\r\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\r\n *\r\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-options-since-500 `createSelectorCreator`}\r\n *\r\n * @since 5.0.0\r\n * @public\r\n */\r\nexport function createSelectorCreator<\r\n  MemoizeFunction extends UnknownMemoizer,\r\n  ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\r\n>(\r\n  options: Simplify<\r\n    SetRequired<\r\n      CreateSelectorOptions<\r\n        typeof weakMapMemoize,\r\n        typeof weakMapMemoize,\r\n        MemoizeFunction,\r\n        ArgsMemoizeFunction\r\n      >,\r\n      'memoize'\r\n    >\r\n  >\r\n): CreateSelectorFunction<MemoizeFunction, ArgsMemoizeFunction>\r\n\r\n/**\r\n * Creates a selector creator function with the specified memoization function\r\n * and options for customizing memoization behavior.\r\n *\r\n * @param memoize - The `memoize` function responsible for memoizing the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\r\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\r\n * @returns A customized `createSelector` function.\r\n *\r\n * @example\r\n * ```ts\r\n * const customCreateSelector = createSelectorCreator(customMemoize, // Function to be used to memoize `resultFunc`\r\n *   option1, // Will be passed as second argument to `customMemoize`\r\n *   option2, // Will be passed as third argument to `customMemoize`\r\n *   option3 // Will be passed as fourth argument to `customMemoize`\r\n * )\r\n *\r\n * const customSelector = customCreateSelector(\r\n *   [inputSelector1, inputSelector2],\r\n *   resultFunc // `resultFunc` will be passed as the first argument to `customMemoize`\r\n * )\r\n * ```\r\n *\r\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\r\n *\r\n * @see {@link https://reselect.js.org/api/createSelectorCreator#using-memoize-and-memoizeoptions `createSelectorCreator`}\r\n *\r\n * @public\r\n */\r\nexport function createSelectorCreator<MemoizeFunction extends UnknownMemoizer>(\r\n  memoize: MemoizeFunction,\r\n  ...memoizeOptionsFromArgs: DropFirstParameter<MemoizeFunction>\r\n): CreateSelectorFunction<MemoizeFunction>\r\n\r\n/**\r\n * Creates a selector creator function with the specified memoization\r\n * function and options for customizing memoization behavior.\r\n *\r\n * @param memoizeOrOptions - Either A `memoize` function or an `options` object containing the `memoize` function.\r\n * @param memoizeOptionsFromArgs - Optional configuration options for the memoization function. These options are then passed to the memoize function as the second argument onwards.\r\n * @returns A customized `createSelector` function.\r\n *\r\n * @template MemoizeFunction - The type of the memoize function that is used to memoize the `resultFunc` inside `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`).\r\n * @template ArgsMemoizeFunction - The type of the optional memoize function that is used to memoize the arguments passed into the output selector generated by `createSelector` (e.g., `lruMemoize` or `weakMapMemoize`). If none is explicitly provided, `weakMapMemoize` will be used.\r\n * @template MemoizeOrOptions - The type of the first argument. It can either be a `memoize` function or an `options` object containing the `memoize` function.\r\n */\r\nexport function createSelectorCreator<\r\n  MemoizeFunction extends UnknownMemoizer,\r\n  ArgsMemoizeFunction extends UnknownMemoizer,\r\n  MemoizeOrOptions extends\r\n    | MemoizeFunction\r\n    | SetRequired<\r\n        CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\r\n        'memoize'\r\n      >\r\n>(\r\n  memoizeOrOptions: MemoizeOrOptions,\r\n  ...memoizeOptionsFromArgs: MemoizeOrOptions extends SetRequired<\r\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\r\n    'memoize'\r\n  >\r\n    ? never\r\n    : DropFirstParameter<MemoizeFunction>\r\n) {\r\n  /** options initially passed into `createSelectorCreator`. */\r\n  const createSelectorCreatorOptions: SetRequired<\r\n    CreateSelectorOptions<MemoizeFunction, ArgsMemoizeFunction>,\r\n    'memoize'\r\n  > = typeof memoizeOrOptions === 'function'\r\n    ? {\r\n        memoize: memoizeOrOptions as MemoizeFunction,\r\n        memoizeOptions: memoizeOptionsFromArgs\r\n      }\r\n    : memoizeOrOptions\r\n\r\n  const createSelector = <\r\n    InputSelectors extends SelectorArray,\r\n    Result,\r\n    OverrideMemoizeFunction extends UnknownMemoizer = MemoizeFunction,\r\n    OverrideArgsMemoizeFunction extends UnknownMemoizer = ArgsMemoizeFunction\r\n  >(\r\n    ...createSelectorArgs: [\r\n      ...inputSelectors: [...InputSelectors],\r\n      combiner: Combiner<InputSelectors, Result>,\r\n      createSelectorOptions?: CreateSelectorOptions<\r\n        MemoizeFunction,\r\n        ArgsMemoizeFunction,\r\n        OverrideMemoizeFunction,\r\n        OverrideArgsMemoizeFunction\r\n      >\r\n    ]\r\n  ) => {\r\n    let recomputations = 0\r\n    let dependencyRecomputations = 0\r\n    let lastResult: Result\r\n\r\n    // Due to the intricacies of rest params, we can't do an optional arg after `...createSelectorArgs`.\r\n    // So, start by declaring the default value here.\r\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\r\n    let directlyPassedOptions: CreateSelectorOptions<\r\n      MemoizeFunction,\r\n      ArgsMemoizeFunction,\r\n      OverrideMemoizeFunction,\r\n      OverrideArgsMemoizeFunction\r\n    > = {}\r\n\r\n    // Normally, the result func or \"combiner\" is the last arg\r\n    let resultFunc = createSelectorArgs.pop() as\r\n      | Combiner<InputSelectors, Result>\r\n      | CreateSelectorOptions<\r\n          MemoizeFunction,\r\n          ArgsMemoizeFunction,\r\n          OverrideMemoizeFunction,\r\n          OverrideArgsMemoizeFunction\r\n        >\r\n\r\n    // If the result func is actually an _object_, assume it's our options object\r\n    if (typeof resultFunc === 'object') {\r\n      directlyPassedOptions = resultFunc\r\n      // and pop the real result func off\r\n      resultFunc = createSelectorArgs.pop() as Combiner<InputSelectors, Result>\r\n    }\r\n\r\n    assertIsFunction(\r\n      resultFunc,\r\n      `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`\r\n    )\r\n\r\n    // Determine which set of options we're using. Prefer options passed directly,\r\n    // but fall back to options given to `createSelectorCreator`.\r\n    const combinedOptions = {\r\n      ...createSelectorCreatorOptions,\r\n      ...directlyPassedOptions\r\n    }\r\n\r\n    const {\r\n      memoize,\r\n      memoizeOptions = [],\r\n      argsMemoize = weakMapMemoize,\r\n      argsMemoizeOptions = [],\r\n      devModeChecks = {}\r\n    } = combinedOptions\r\n\r\n    // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\r\n    // is an array. In most libs I've looked at, it's an equality function or options object.\r\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\r\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\r\n    // we wrap it in an array so we can apply it.\r\n    const finalMemoizeOptions = ensureIsArray(memoizeOptions)\r\n    const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions)\r\n    const dependencies = getDependencies(createSelectorArgs) as InputSelectors\r\n\r\n    const memoizedResultFunc = memoize(function recomputationWrapper() {\r\n      recomputations++\r\n      // apply arguments instead of spreading for performance.\r\n      // @ts-ignore\r\n      return (resultFunc as Combiner<InputSelectors, Result>).apply(\r\n        null,\r\n        arguments as unknown as Parameters<Combiner<InputSelectors, Result>>\r\n      )\r\n    }, ...finalMemoizeOptions) as Combiner<InputSelectors, Result> &\r\n      ExtractMemoizerFields<OverrideMemoizeFunction>\r\n\r\n    let firstRun = true\r\n\r\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\r\n    const selector = argsMemoize(function dependenciesChecker() {\r\n      dependencyRecomputations++\r\n      /** Return values of input selectors which the `resultFunc` takes as arguments. */\r\n      const inputSelectorResults = collectInputSelectorResults(\r\n        dependencies,\r\n        arguments\r\n      )\r\n\r\n      // apply arguments instead of spreading for performance.\r\n      // @ts-ignore\r\n      lastResult = memoizedResultFunc.apply(null, inputSelectorResults)\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        const { identityFunctionCheck, inputStabilityCheck } =\r\n          getDevModeChecksExecutionInfo(firstRun, devModeChecks)\r\n        if (identityFunctionCheck.shouldRun) {\r\n          identityFunctionCheck.run(\r\n            resultFunc as Combiner<InputSelectors, Result>,\r\n            inputSelectorResults,\r\n            lastResult\r\n          )\r\n        }\r\n\r\n        if (inputStabilityCheck.shouldRun) {\r\n          // make a second copy of the params, to check if we got the same results\r\n          const inputSelectorResultsCopy = collectInputSelectorResults(\r\n            dependencies,\r\n            arguments\r\n          )\r\n\r\n          inputStabilityCheck.run(\r\n            { inputSelectorResults, inputSelectorResultsCopy },\r\n            { memoize, memoizeOptions: finalMemoizeOptions },\r\n            arguments\r\n          )\r\n        }\r\n\r\n        if (firstRun) firstRun = false\r\n      }\r\n\r\n      return lastResult\r\n    }, ...finalArgsMemoizeOptions) as unknown as Selector<\r\n      GetStateFromSelectors<InputSelectors>,\r\n      Result,\r\n      GetParamsFromSelectors<InputSelectors>\r\n    > &\r\n      ExtractMemoizerFields<OverrideArgsMemoizeFunction>\r\n\r\n    return Object.assign(selector, {\r\n      resultFunc,\r\n      memoizedResultFunc,\r\n      dependencies,\r\n      dependencyRecomputations: () => dependencyRecomputations,\r\n      resetDependencyRecomputations: () => {\r\n        dependencyRecomputations = 0\r\n      },\r\n      lastResult: () => lastResult,\r\n      recomputations: () => recomputations,\r\n      resetRecomputations: () => {\r\n        recomputations = 0\r\n      },\r\n      memoize,\r\n      argsMemoize\r\n    }) as OutputSelector<\r\n      InputSelectors,\r\n      Result,\r\n      OverrideMemoizeFunction,\r\n      OverrideArgsMemoizeFunction\r\n    >\r\n  }\r\n\r\n  Object.assign(createSelector, {\r\n    withTypes: () => createSelector\r\n  })\r\n\r\n  return createSelector as CreateSelectorFunction<\r\n    MemoizeFunction,\r\n    ArgsMemoizeFunction\r\n  >\r\n}\r\n\r\n/**\r\n * Accepts one or more \"input selectors\" (either as separate arguments or a single array),\r\n * a single \"result function\" / \"combiner\", and an optional options object, and\r\n * generates a memoized selector function.\r\n *\r\n * @see {@link https://reselect.js.org/api/createSelector `createSelector`}\r\n *\r\n * @public\r\n */\r\nexport const createSelector =\r\n  /* #__PURE__ */ createSelectorCreator(weakMapMemoize)\r\n","import { createSelector } from './createSelectorCreator'\r\n\r\nimport type { CreateSelectorFunction } from './createSelectorCreator'\r\nimport type {\r\n  InterruptRecursion,\r\n  ObjectValuesToTuple,\r\n  OutputSelector,\r\n  Selector,\r\n  Simplify,\r\n  UnknownMemoizer\r\n} from './types'\r\nimport { assertIsObject } from './utils'\r\nimport type { weakMapMemoize } from './weakMapMemoize'\r\n\r\n/**\r\n * Represents a mapping of selectors to their return types.\r\n *\r\n * @template TObject - An object type where each property is a selector function.\r\n *\r\n * @public\r\n */\r\nexport type SelectorResultsMap<TObject extends SelectorsObject> = {\r\n  [Key in keyof TObject]: ReturnType<TObject[Key]>\r\n}\r\n\r\n/**\r\n * Represents a mapping of selectors for each key in a given root state.\r\n *\r\n * This type is a utility that takes a root state object type and\r\n * generates a corresponding set of selectors. Each selector is associated\r\n * with a key in the root state, allowing for the selection\r\n * of specific parts of the state.\r\n *\r\n * @template RootState - The type of the root state object.\r\n *\r\n * @since 5.0.0\r\n * @public\r\n */\r\nexport type RootStateSelectors<RootState = any> = {\r\n  [Key in keyof RootState]: Selector<RootState, RootState[Key], []>\r\n}\r\n\r\n/**\r\n * @deprecated Please use {@linkcode StructuredSelectorCreator.withTypes createStructuredSelector.withTypes<RootState>()} instead. This type will be removed in the future.\r\n * @template RootState - The type of the root state object.\r\n *\r\n * @since 5.0.0\r\n * @public\r\n */\r\nexport type TypedStructuredSelectorCreator<RootState = any> =\r\n  /**\r\n   * A convenience function that simplifies returning an object\r\n   * made up of selector results.\r\n   *\r\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\r\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\r\n   * @returns A memoized structured selector.\r\n   *\r\n   * @example\r\n   * <caption>Modern Use Case</caption>\r\n   * ```ts\r\n   * import { createSelector, createStructuredSelector } from 'reselect'\r\n   *\r\n   * interface RootState {\r\n   *   todos: {\r\n   *     id: number\r\n   *     completed: boolean\r\n   *     title: string\r\n   *     description: string\r\n   *   }[]\r\n   *   alerts: { id: number; read: boolean }[]\r\n   * }\r\n   *\r\n   * // This:\r\n   * const structuredSelector = createStructuredSelector(\r\n   *   {\r\n   *     todos: (state: RootState) => state.todos,\r\n   *     alerts: (state: RootState) => state.alerts,\r\n   *     todoById: (state: RootState, id: number) => state.todos[id]\r\n   *   },\r\n   *   createSelector\r\n   * )\r\n   *\r\n   * // Is essentially the same as this:\r\n   * const selector = createSelector(\r\n   *   [\r\n   *     (state: RootState) => state.todos,\r\n   *     (state: RootState) => state.alerts,\r\n   *     (state: RootState, id: number) => state.todos[id]\r\n   *   ],\r\n   *   (todos, alerts, todoById) => {\r\n   *     return {\r\n   *       todos,\r\n   *       alerts,\r\n   *       todoById\r\n   *     }\r\n   *   }\r\n   * )\r\n   * ```\r\n   *\r\n   * @example\r\n   * <caption>In your component:</caption>\r\n   * ```tsx\r\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\r\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\r\n   * import type { FC } from 'react'\r\n   * import { useSelector } from 'react-redux'\r\n   *\r\n   * interface Props {\r\n   *   id: number\r\n   * }\r\n   *\r\n   * const MyComponent: FC<Props> = ({ id }) => {\r\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\r\n   *     structuredSelector(state, id)\r\n   *   )\r\n   *\r\n   *   return (\r\n   *     <div>\r\n   *       Next to do is:\r\n   *       <h2>{todoById.title}</h2>\r\n   *       <p>Description: {todoById.description}</p>\r\n   *       <ul>\r\n   *         <h3>All other to dos:</h3>\r\n   *         {todos.map(todo => (\r\n   *           <li key={todo.id}>{todo.title}</li>\r\n   *         ))}\r\n   *       </ul>\r\n   *     </div>\r\n   *   )\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * <caption>Simple Use Case</caption>\r\n   * ```ts\r\n   * const selectA = state => state.a\r\n   * const selectB = state => state.b\r\n   *\r\n   * // The result function in the following selector\r\n   * // is simply building an object from the input selectors\r\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\r\n   *   a,\r\n   *   b\r\n   * }))\r\n   *\r\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\r\n   * ```\r\n   *\r\n   * @template InputSelectorsObject - The shape of the input selectors object.\r\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\r\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\r\n   */\r\n  <\r\n    InputSelectorsObject extends RootStateSelectors<RootState> = RootStateSelectors<RootState>,\r\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\r\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\r\n  >(\r\n    inputSelectorsObject: InputSelectorsObject,\r\n    selectorCreator?: CreateSelectorFunction<\r\n      MemoizeFunction,\r\n      ArgsMemoizeFunction\r\n    >\r\n  ) => OutputSelector<\r\n    ObjectValuesToTuple<InputSelectorsObject>,\r\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\r\n    MemoizeFunction,\r\n    ArgsMemoizeFunction\r\n  > &\r\n    InterruptRecursion\r\n\r\n/**\r\n * Represents an object where each property is a selector function.\r\n *\r\n * @template StateType - The type of state that all the selectors operate on.\r\n *\r\n * @public\r\n */\r\nexport type SelectorsObject<StateType = any> = Record<\r\n  string,\r\n  Selector<StateType>\r\n>\r\n\r\n/**\r\n * It provides a way to create structured selectors.\r\n * The structured selector can take multiple input selectors\r\n * and map their output to an object with specific keys.\r\n *\r\n * @template StateType - The type of state that the structured selectors created with this structured selector creator will operate on.\r\n *\r\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\r\n *\r\n * @public\r\n */\r\nexport interface StructuredSelectorCreator<StateType = any> {\r\n  /**\r\n   * A convenience function that simplifies returning an object\r\n   * made up of selector results.\r\n   *\r\n   * @param inputSelectorsObject - A key value pair consisting of input selectors.\r\n   * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\r\n   * @returns A memoized structured selector.\r\n   *\r\n   * @example\r\n   * <caption>Modern Use Case</caption>\r\n   * ```ts\r\n   * import { createSelector, createStructuredSelector } from 'reselect'\r\n   *\r\n   * interface RootState {\r\n   *   todos: {\r\n   *     id: number\r\n   *     completed: boolean\r\n   *     title: string\r\n   *     description: string\r\n   *   }[]\r\n   *   alerts: { id: number; read: boolean }[]\r\n   * }\r\n   *\r\n   * // This:\r\n   * const structuredSelector = createStructuredSelector(\r\n   *   {\r\n   *     todos: (state: RootState) => state.todos,\r\n   *     alerts: (state: RootState) => state.alerts,\r\n   *     todoById: (state: RootState, id: number) => state.todos[id]\r\n   *   },\r\n   *   createSelector\r\n   * )\r\n   *\r\n   * // Is essentially the same as this:\r\n   * const selector = createSelector(\r\n   *   [\r\n   *     (state: RootState) => state.todos,\r\n   *     (state: RootState) => state.alerts,\r\n   *     (state: RootState, id: number) => state.todos[id]\r\n   *   ],\r\n   *   (todos, alerts, todoById) => {\r\n   *     return {\r\n   *       todos,\r\n   *       alerts,\r\n   *       todoById\r\n   *     }\r\n   *   }\r\n   * )\r\n   * ```\r\n   *\r\n   * @example\r\n   * <caption>In your component:</caption>\r\n   * ```tsx\r\n   * import type { RootState } from 'createStructuredSelector/modernUseCase'\r\n   * import { structuredSelector } from 'createStructuredSelector/modernUseCase'\r\n   * import type { FC } from 'react'\r\n   * import { useSelector } from 'react-redux'\r\n   *\r\n   * interface Props {\r\n   *   id: number\r\n   * }\r\n   *\r\n   * const MyComponent: FC<Props> = ({ id }) => {\r\n   *   const { todos, alerts, todoById } = useSelector((state: RootState) =>\r\n   *     structuredSelector(state, id)\r\n   *   )\r\n   *\r\n   *   return (\r\n   *     <div>\r\n   *       Next to do is:\r\n   *       <h2>{todoById.title}</h2>\r\n   *       <p>Description: {todoById.description}</p>\r\n   *       <ul>\r\n   *         <h3>All other to dos:</h3>\r\n   *         {todos.map(todo => (\r\n   *           <li key={todo.id}>{todo.title}</li>\r\n   *         ))}\r\n   *       </ul>\r\n   *     </div>\r\n   *   )\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * <caption>Simple Use Case</caption>\r\n   * ```ts\r\n   * const selectA = state => state.a\r\n   * const selectB = state => state.b\r\n   *\r\n   * // The result function in the following selector\r\n   * // is simply building an object from the input selectors\r\n   * const structuredSelector = createSelector(selectA, selectB, (a, b) => ({\r\n   *   a,\r\n   *   b\r\n   * }))\r\n   *\r\n   * const result = structuredSelector({ a: 1, b: 2 }) // will produce { x: 1, y: 2 }\r\n   * ```\r\n   *\r\n   * @template InputSelectorsObject - The shape of the input selectors object.\r\n   * @template MemoizeFunction - The type of the memoize function that is used to create the structured selector. It defaults to `weakMapMemoize`.\r\n   * @template ArgsMemoizeFunction - The type of the of the memoize function that is used to memoize the arguments passed into the generated structured selector. It defaults to `weakMapMemoize`.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\r\n   */\r\n  <\r\n    InputSelectorsObject extends SelectorsObject<StateType>,\r\n    MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\r\n    ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\r\n  >(\r\n    inputSelectorsObject: InputSelectorsObject,\r\n    selectorCreator?: CreateSelectorFunction<\r\n      MemoizeFunction,\r\n      ArgsMemoizeFunction\r\n    >\r\n  ): OutputSelector<\r\n    ObjectValuesToTuple<InputSelectorsObject>,\r\n    Simplify<SelectorResultsMap<InputSelectorsObject>>,\r\n    MemoizeFunction,\r\n    ArgsMemoizeFunction\r\n  > &\r\n    InterruptRecursion\r\n\r\n  /**\r\n   * Creates a \"pre-typed\" version of\r\n   * {@linkcode createStructuredSelector createStructuredSelector}\r\n   * where the `state` type is predefined.\r\n   *\r\n   * This allows you to set the `state` type once, eliminating the need to\r\n   * specify it with every\r\n   * {@linkcode createStructuredSelector createStructuredSelector} call.\r\n   *\r\n   * @returns A pre-typed `createStructuredSelector` with the state type already defined.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * import { createStructuredSelector } from 'reselect'\r\n   *\r\n   * export interface RootState {\r\n   *   todos: { id: number; completed: boolean }[]\r\n   *   alerts: { id: number; read: boolean }[]\r\n   * }\r\n   *\r\n   * export const createStructuredAppSelector =\r\n   *   createStructuredSelector.withTypes<RootState>()\r\n   *\r\n   * const structuredAppSelector = createStructuredAppSelector({\r\n   *   // Type of `state` is set to `RootState`, no need to manually set the type\r\n   *   todos: state => state.todos,\r\n   *   alerts: state => state.alerts,\r\n   *   todoById: (state, id: number) => state.todos[id]\r\n   * })\r\n   *\r\n   * ```\r\n   * @template OverrideStateType - The specific type of state used by all structured selectors created with this structured selector creator.\r\n   *\r\n   * @see {@link https://reselect.js.org/api/createstructuredselector#defining-a-pre-typed-createstructuredselector `createSelector.withTypes`}\r\n   *\r\n   * @since 5.1.0\r\n   */\r\n  withTypes: <\r\n    OverrideStateType extends StateType\r\n  >() => StructuredSelectorCreator<OverrideStateType>\r\n}\r\n\r\n/**\r\n * A convenience function that simplifies returning an object\r\n * made up of selector results.\r\n *\r\n * @param inputSelectorsObject - A key value pair consisting of input selectors.\r\n * @param selectorCreator - A custom selector creator function. It defaults to `createSelector`.\r\n * @returns A memoized structured selector.\r\n *\r\n * @example\r\n * <caption>Modern Use Case</caption>\r\n * ```ts\r\n * import { createSelector, createStructuredSelector } from 'reselect'\r\n *\r\n * interface RootState {\r\n *   todos: {\r\n *     id: number\r\n *     completed: boolean\r\n *     title: string\r\n *     description: string\r\n *   }[]\r\n *   alerts: { id: number; read: boolean }[]\r\n * }\r\n *\r\n * // This:\r\n * const structuredSelector = createStructuredSelector(\r\n *   {\r\n *     todos: (state: RootState) => state.todos,\r\n *     alerts: (state: RootState) => state.alerts,\r\n *     todoById: (state: RootState, id: number) => state.todos[id]\r\n *   },\r\n *   createSelector\r\n * )\r\n *\r\n * // Is essentially the same as this:\r\n * const selector = createSelector(\r\n *   [\r\n *     (state: RootState) => state.todos,\r\n *     (state: RootState) => state.alerts,\r\n *     (state: RootState, id: number) => state.todos[id]\r\n *   ],\r\n *   (todos, alerts, todoById) => {\r\n *     return {\r\n *       todos,\r\n *       alerts,\r\n *       todoById\r\n *     }\r\n *   }\r\n * )\r\n * ```\r\n *\r\n * @see {@link https://reselect.js.org/api/createStructuredSelector `createStructuredSelector`}\r\n *\r\n * @public\r\n */\r\nexport const createStructuredSelector: StructuredSelectorCreator =\r\n  Object.assign(\r\n    <\r\n      InputSelectorsObject extends SelectorsObject,\r\n      MemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize,\r\n      ArgsMemoizeFunction extends UnknownMemoizer = typeof weakMapMemoize\r\n    >(\r\n      inputSelectorsObject: InputSelectorsObject,\r\n      selectorCreator: CreateSelectorFunction<\r\n        MemoizeFunction,\r\n        ArgsMemoizeFunction\r\n      > = createSelector as CreateSelectorFunction<\r\n        MemoizeFunction,\r\n        ArgsMemoizeFunction\r\n      >\r\n    ) => {\r\n      assertIsObject(\r\n        inputSelectorsObject,\r\n        'createStructuredSelector expects first argument to be an object ' +\r\n          `where each property is a selector, instead received a ${typeof inputSelectorsObject}`\r\n      )\r\n      const inputSelectorKeys = Object.keys(inputSelectorsObject)\r\n      const dependencies = inputSelectorKeys.map(\r\n        key => inputSelectorsObject[key]\r\n      )\r\n      const structuredSelector = selectorCreator(\r\n        dependencies,\r\n        (...inputSelectorResults: any[]) => {\r\n          return inputSelectorResults.reduce((composition, value, index) => {\r\n            composition[inputSelectorKeys[index]] = value\r\n            return composition\r\n          }, {})\r\n        }\r\n      )\r\n      return structuredSelector\r\n    },\r\n    { withTypes: () => createStructuredSelector }\r\n  ) as StructuredSelectorCreator\r\n"],"names":["root","global","window","this","document","newNotifySettings","notiflixNamespace","notiflixConsoleDocs","defaultFontFamily","typesNotify","Success","Failure","Warning","Info","notifySettings","wrapID","overlayID","width","position","distance","opacity","borderRadius","rtl","timeout","messageMaxLength","backOverlay","backOverlayColor","plainText","showOnlyTheLastOne","clickToClose","pauseOnHover","ID","className","zindex","fontFamily","fontSize","cssAnimation","cssAnimationDuration","cssAnimationStyle","closeButton","useIcon","useFontAwesome","fontAwesomeIconStyle","fontAwesomeIconSize","success","background","textColor","childClassName","notiflixIconColor","fontAwesomeClassName","fontAwesomeIconColor","failure","warning","info","commonConsoleError","message","console","error","commonCheckHeadOrBody","element","commonSetInternalCSSCodes","getInternalCSSCodes","styleElementId","getElementById","internalCSS","createElement","id","innerHTML","head","appendChild","commonExtendOptions","extended","deep","i","Object","prototype","toString","call","arguments","merge","obj","prop","hasOwnProperty","length","commonGetPlaintext","html","htmlPool","textContent","innerText","notifyGetInternalCSSCodes","notifyCreateCounter","notifyCreate","notifyType","callbackOrOptions","options","Notiflix","Notify","init","newNotifySettingsBackup","Array","isArray","newOptions","theType","toLocaleLowerCase","substring","ntflxNotifyWrap","style","zIndex","left","top","right","bottom","margin","classList","add","maxHeight","display","flexWrap","flexDirection","justifyContent","alignItems","pointerEvents","ntflxNotifyOverlay","height","animationDuration","body","ntflxNotify","color","setAttribute","closeButtonHTML","svgIcon","notifyWrap","insertBefore","firstChild","eachNotifyElement","timeoutHide","timeoutRemove","hideNotifyElementsAndOverlay","removeOverlay","childElementCount","clearTimeout","removeNotifyElmentsAndWrapper","parentNode","removeChild","querySelector","addEventListener","clickToCloseTimeout","setTimeout","callbackTimeout","autoRemove","remove","allNotifyElmNotTheLastOne","querySelectorAll","eachNotifyElmNotLastOne","userNotifyOptions","userNotifyExtendOptions","factory","assertIsFunction","func","TypeError","errorMessage","ensureIsArray","item","getDependencies","createSelectorArgs","dependencies","array","every","itemTypes","map","name","join","assertIsArrayOfFunctions","Symbol","getPrototypeOf","Ref","WeakRef","constructor","value","deref","weakMapMemoize","fnNode","s","v","o","p","resultEqualityCheck","lastResult","resultsCount","memoized","cacheNode","l","arg","objectCache","WeakMap","objectNode","get","set","primitiveCache","Map","primitiveNode","terminatedNode","result","apply","lastResultValue","_lastResult$deref","clearCache","resetResultsCount","createSelectorCreator","memoizeOrOptions","memoizeOptionsFromArgs","createSelectorCreatorOptions","memoize","memoizeOptions","createSelector","recomputations","dependencyRecomputations","directlyPassedOptions","resultFunc","pop","combinedOptions","argsMemoize","argsMemoizeOptions","devModeChecks","finalMemoizeOptions","finalArgsMemoizeOptions","memoizedResultFunc","selector","inputSelectorResults","inputSelectorArgs","push","collectInputSelectorResults","assign","resetDependencyRecomputations","resetRecomputations","withTypes","createStructuredSelector","inputSelectorsObject","selectorCreator","object","assertIsObject","inputSelectorKeys","keys","structuredSelector","key","reduce","composition","index"],"sourceRoot":""}
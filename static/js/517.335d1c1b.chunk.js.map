{"version":3,"file":"static/js/517.335d1c1b.chunk.js","mappings":"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","sources":["redux/filter/filterSelector.js","components/Filter/Filter.jsx","redux/contacts/contactsSelector.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const selectFilter = state => state.filter.filterValue;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/filter/filterSelector';\nimport { setFilter } from '../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search by name\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/filterSelector';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectIsError = state => state.contacts.isError;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { deleteContacts } from '../../redux/contacts/contactsOperations';\n\nexport const ContactListItem = ({ filteredContact }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteFulfilled = () => {\n    dispatch(deleteContacts(filteredContact.id));\n    Notify.success(`${filteredContact.name} was deleted`, {\n      position: 'right-bottom',\n    });\n  };\n\n  return (\n    <div>\n      <li>\n        <p>{filteredContact.name}:</p>\n        <p>{filteredContact.number}</p>\n        <button onClick={handleDeleteFulfilled}>Delete</button>\n      </li>\n    </div>\n  );\n};\nContactListItem.propTypes = {\n  filteredContact: PropTypes.object.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectIsError,\n  selectFilteredContacts,\n} from '../../redux/contacts/contactsSelector';\nimport { fetchContacts } from '../../redux/contacts/contactsOperations';\nimport { Loader } from '../Loader/Loader';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectIsError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {/* if loading and not error, show Loader */}\n      {isLoading && !isError && <Loader />}\n      {/*      if not loading, not error and filtered contacts is empty, show warning */}\n      {!isLoading && !isError && filteredContacts.length === 0 && (\n        <p>The Phonebook is empty. Please add a contact</p>\n      )}\n      {/*    if not load, not error and have atleast 1 filtered contact, show\n      ContactListItem */}\n      {!isLoading &&\n        !isError &&\n        filteredContacts.length > 0 &&\n        filteredContacts.map(filteredContact => (\n          /*  <ContactListItem key={filteredContact.id} contact={filteredContact} /> */\n          <ContactListItem\n            key={filteredContact.id}\n            filteredContact={filteredContact}\n          />\n        ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formField\":\"ContactForm_formField__O5fo+\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport css from './ContactForm.module.css';\nimport { selectContacts } from '../../redux/contacts/contactsSelector';\nimport { addContacts } from '../../redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleNameChange = e => {\n    setName(e.target.value);\n  };\n\n  const handleNumberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    // prevent the form refreshing when submitting\n    e.preventDefault();\n\n    // if name and number is empty, it will not submit(return)\n    if (name.trim() === '' || number.trim() === '') {\n      return;\n    }\n\n    // if existing contact set an alert, it will not submit(return)\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (existingContact) {\n      Notify.warning(`${name} is already in contacts!`);\n      return;\n    }\n    // dispatch(addContacts({ name: name, number: number }));\n    Notify.success(`${name} was successfully added`, {\n      position: 'right-top',\n    });\n    dispatch(addContacts({ name, number }));\n\n    // Reset Form Fields upon submitting\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formField}>\n        <p className={css.formLabel}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          // add \\ before - in [' \\-] to make it work (LMS)\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n          required\n          value={name}\n          onChange={handleNameChange}\n        />\n      </label>\n\n      <label className={css.formField}>\n        <p className={css.formLabel}>Number</p>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          // add \\ before - in [\\-.\\s] to make it work (LMS)\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleNumberChange}\n        />\n      </label>\n      <button className={css.formButton} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n};\n","import { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\nconst ContactsPage = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </HelmetProvider>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","filterValue","Filter","dispatch","useDispatch","useSelector","_jsxs","children","_jsx","type","name","placeholder","value","onChange","e","setFilter","target","selectContacts","contacts","items","selectIsLoading","isLoading","selectIsError","isError","selectFilteredContacts","createSelector","_ref","toLowerCase","includes","ContactListItem","filteredContact","number","onClick","handleDeleteFulfilled","deleteContacts","id","Notify","success","position","ContactList","filteredContacts","useEffect","fetchContacts","Loader","length","map","ContactForm","setName","useState","setNumber","className","css","onSubmit","preventDefault","trim","find","contact","warning","addContacts","pattern","title","required","ContactsPage","HelmetProvider","Helmet"],"sourceRoot":""}